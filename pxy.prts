enum{Student, Employee, Elderly};

channel DoctorBusy 0;

#define MAX_WAITING_TIME 60;
#define CONSULTING_TIME 30; //  < 30 for updated versions.
#define NO_OF_DOCS 3;
//#define NO_OF_PATIENT 100;
#define goal count < 10;

var patient;

var count = 0; //count number of patients leaving

//Patient arriving

KnockingMorning = pcase{
						15: { patient = Elderly } -> Skip
						10: { patient = Student } -> Skip
						5: 	{ patient = Employee } -> Skip
						70: Skip
};

KnockingNoon = pcase{
						10: { patient = Elderly } -> Skip
						15: { patient = Student } -> Skip
						25: { patient = Employee } -> Skip
						50: Skip
};

KnockingAfternoon = pcase{
						7:	{ patient = Elderly } -> Skip
						15: { patient = Student } -> Skip
						8: 	{ patient = Employee } -> Skip
						70: Skip
};

MorningPatient = KnockingMorning; (DoctorBusy?0 -> SeeDoctor) timeout[60] PatientLeave{count = count + 1;} -> Wait[1]; MorningPatient;
NoonPatient = KnockingNoon; (DoctorBusy?0 -> SeeDoctor) timeout[60] PatientLeave{count = count + 1;} -> Wait[1]; NoonPatient;
AfternoonPatient = KnockingAfternoon; (DoctorBusy?0 -> SeeDoctor) timeout[60] PatientLeave{count = count + 1;} -> Wait[1]; AfternoonPatient;
Patient = MorningPatient deadline[160]; NoonPatient deadline[160]; AfternoonPatient deadline[160];
SeeDoctor = DoctorBusy!1 -> Wait[30]; DoctorBusy!0 -> SeeDoctor;

Hospital = Patient ||| SeeDoctor;

#assert Hospital reaches goal with prob;