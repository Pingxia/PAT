//I think we only simulate up to 60 minutes.... otherwise too long

#import "PAT.Lib.List";

#define N 12;
#define MaxWaiting 10;
#define PatientArriveInterval 5;
#define ConsultTime 30;
#define RegisterTime 6;
#define openHour 60;
#define MaxQueueLength 3;
#define StockLowerBound 10;
var ServePatient = 0;
var AngryPatient = 0;
var FreeDoctor = 3;
var Inspector = 1;
var MedicineStock = 100;
//var student = 1;
//var worker = 2;
//var elderly = 3;
var close;

var<List> NormalCounter;
var<List> SpecialCounter; 
var<List> ConsultQueue;
var<List> InspectQueue;

Arrive(i) = atomic{ Wait[PatientArriveInterval*i];  pcase {
						4: NormalRegistration(i)
						1: SpecialRegistration(i)
						}
			};

//Arrive(i) = atomic{     pcase {
//						4: SetComingPeopleType(i); NormalRegistration(i)
//						1: SetComingPeopleType(i); SpecialRegistration(i)
//						}
//			};

//SetComingPeopleType(i) = atomic{
//						pcase {
//							1: SetStudentComingTime()
//							1: SetWorkerComingTime()
//							4: SetElderlyComingTime()
//						}
//			};
//SetStudentComingTime() = atomic {
//						pcase {
//						1: Wait[5]
//						1: Wait[10]
//						1: Wait[15]
//						1: Wait[20]
//						3: Wait[25]
//						3: Wait[30]
//						3: Wait[35]
//						3: Wait[40]
//						1: Wait[45]
//						1: Wait[50]
//						1: Wait[55]
//						1: Wait[60]
//						}
//};
//
//SetWorkerComingTime() = atomic {
//						pcase {
//						1: Wait[5]
//						1: Wait[10]
//						1: Wait[15]
//						1: Wait[20]
//						1: Wait[25]
//						1: Wait[30]
//						1: Wait[35]
//						1: Wait[40]
//						3: Wait[45]
//						3: Wait[50]
//						3: Wait[55]
//						3: Wait[60]
//						}
//};
//
//SetElderlyComingTime() = atomic {
//						pcase {
//						3: Wait[5]
//						3: Wait[10]
//						3: Wait[15]
//						2: Wait[20]
//						2: Wait[25]
//						2: Wait[30]
//						2: Wait[35]
//						2: Wait[40]
//						2: Wait[45]
//						3: Wait[50]
//						3: Wait[55]
//						3: Wait[60]
//						}
//};			

NormalRegistration(i) = if (NormalCounter.Count() > MaxQueueLength) {
							atomic{AngryLeave.i{AngryPatient ++} -> Skip}
						} else {
							QueueUp.i{NormalCounter.Add(i)} -> ((atomic{[NormalCounter.Count()>0 && NormalCounter.Get(0) == i]Register.i ->
							Wait[RegisterTime]; tau{NormalCounter.RemoveAt(0)} -> Consultation(i)}) timeout[MaxWaiting] 
							(AngryLeave.i{AngryPatient ++;NormalCounter.Remove(i)} -> Skip))
						};

SpecialRegistration(i) = if (SpecialCounter.Count() > MaxQueueLength) {
							atomic{AngryLeave.i{AngryPatient ++} -> Skip}
						} else {
							QueueUp.i{SpecialCounter.Add(i)} -> ((atomic{[SpecialCounter.Count()>0 && SpecialCounter.Get(0) == i]Register.i ->
							Wait[RegisterTime]; tau{SpecialCounter.RemoveAt(0)} -> Consultation(i)}) timeout[MaxWaiting] 
							(AngryLeave.i{AngryPatient ++;SpecialCounter.Remove(i)} ->Skip))
						};
							
Consultation(i) = atomic {DocotorQ.i{ConsultQueue.Add(i)} -> ([ConsultQueue.Count()>0 && ConsultQueue.Get(0) == i && FreeDoctor > 0]SeeDoctor.i{FreeDoctor=FreeDoctor-1;ConsultQueue.RemoveAt(0);} -> Wait[ConsultTime]; 
						Leave.i{FreeDoctor=FreeDoctor+1; ServePatient ++;} -> Skip;
						pcase {
						1: Inspection(i)
						3: PickMedicine(i)
						})};

Inspection(i) = atomic{InspectQ.i{InspectQueue.Add(i)} -> ([InspectQueue.Count()>0 && InspectQueue.Get(0) == i && Inspector > 0]Inspect.i{Inspector=Inspector-1;InspectQueue.RemoveAt(0);} -> Wait[ConsultTime]; 
						LeaveInspect.i{Inspector=Inspector+1;} -> Skip)};
 
PickMedicine(i) = GetMedicine.i {MedicineStock--;} -> Skip;

//Consultation(i) = (atomic {[FreeDoctor > 0]SeeDoctor.i{FreeDoctor=FreeDoctor-1;} -> Wait[ConsultTime]; 
//					Leave.i{FreeDoctor=FreeDoctor+1;} -> Skip} ) timeout[MaxWaiting] AngryLeave.i{AngryPatient ++} -> Skip;

//Patient(i) = atomic{Arrive(i);Registration(i)};

#define notEmpty NormalCounter.Count() == 0 && ServePatient > 0; 

Hospital = ||| i:{0..N-1}@Arrive(i);
#define noLeavingWithAnger  AngryPatient == 0;
#define lessThanOneThirdLeaving 3*AngryPatient < N;
#define refillMedicine MedicineStock<StockLowerBound;
//#define noLousyDoc ConsultQueue[0] && ConsultQueue[1] && ConsultQueue[2];

#assert Hospital reaches notEmpty;
#assert Hospital deadlockfree;
#assert Hospital |= [] noLeavingWithAnger;
#assert Hospital |= [] noLeavingWithAnger with prob;
#assert Hospital |= [] lessThanOneThirdLeaving;
#assert Hospital |= [] lessThanOneThirdLeaving with prob;
//#assert Hospital reaches noLousyDocs;
#assert Hospital reaches refillMedicine;


HospitalWithClose = ||| i:{0..N-1}@Arrive(i) deadline[openHour];
#assert HospitalWithClose |= [] noLeavingWithAnger with prob;
